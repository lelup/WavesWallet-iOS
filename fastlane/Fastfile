require 'open-uri'

default_platform(:ios)

platform :ios do
  
  lane :waves_test do
    
    ENV['FASTLANE_TEAM_ID'] = "com.wavesplatform.waveswallet.test"
    ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.waveswallet.test"

    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")

		cocoapods(
			verbose: true,
			clean: true,
			use_bundle_exec: false
		)
		
		gym(scheme: "WavesWallet-iOS-Test",
        workspace: "WavesWallet-iOS.xcworkspace",
        include_bitcode: true,
        include_symbols: true,
        export_options: "#{Dir.pwd}/ExportOptions-AppStore.plist"
    )

    testflight(username: "#{ENV['APPLDE_DEV_PORTAL_ID']}",
              itc_provider: "#{ENV['FASTLANE_ITC_TEAM_ID']}",
              team_id: "#{ENV['FASTLANE_TEAM_ID']}",
              wait_for_uploaded_build: "false")
  end


  lane :waves do

    ENV['FASTLANE_TEAM_ID'] = "com.wavesplatform.WavesWallet"
    ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.WavesWallet"

    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")

		cocoapods(
			verbose: true,
			clean: true,
			use_bundle_exec: false
		)
		
		gym(scheme: "WavesWallet-iOS-Release",
        workspace: "WavesWallet-iOS.xcworkspace",
        include_bitcode: true,
        include_symbols: true,
        export_options: "#{Dir.pwd}/ExportOptions-AppStore.plist"
    )

    testflight(username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
              itc_provider: "#{ENV['FASTLANE_ITC_TEAM_ID']}",
              team_id: "#{ENV['FASTLANE_TEAM_ID']}",
              wait_for_uploaded_build: "false")
  end



  lane :certificates do
    match(app_identifier: ["com.wavesplatform.waveswallet.test", "com.wavesplatform.waveswallet", "com.wavesplatform.waveswallet.dev"],
          git_url: "#{ENV['URL_CERTIFICATES_GIT']}",
          username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
          type: "appstore",          
          readonly: true)
  end

  lane :download_environments do
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
  end

  lane :upload_to_testflight do
    testflight(username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
      itc_provider: "#{ENV['FASTLANE_ITC_TEAM_ID']}",
      team_id: "#{ENV['FASTLANE_TEAM_ID']}",
      wait_for_uploaded_build: "false")
  end

end
