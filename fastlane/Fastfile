require 'open-uri'
require 'credentials_manager'

default_platform(:ios)

platform :ios do

  lane :waves_test do
    ENV['SCHEME_PROJECT'] ="WavesWallet-iOS-Test"    
    ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.waveswallet.test"
    ENV['TESTFLIGHT_APP_IDENTITIFER'] = "com.wavesplatform.waveswallet.test"
    ENV['URL_FIREBASE'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Test.plist"
    ENV['URL_APPSFLYER'] = "#{ENV['URL_ROOT_APPSFLYER']}/Appsflyer-Info-Test.plist"
    ENV['EXPORT_OPTIONS'] = "#{Dir.pwd}/ExportOptions-AppStore.plist"
    ENV['MATCH_TYPE'] = "appstore"
    build_projet
    upload_testflight
  end

  lane :waves do
    ENV['SCHEME_PROJECT'] ="WavesWallet-iOS-Release"
    ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.WavesWallet"
    ENV['TESTFLIGHT_APP_IDENTITIFER'] = "com.wavesplatform.WavesWallet"
    ENV['URL_FIREBASE'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Prod.plist"
    ENV['URL_APPSFLYER'] = "#{ENV['URL_ROOT_APPSFLYER']}/Appsflyer-Info-Prod.plist"
    ENV['EXPORT_OPTIONS'] = "#{Dir.pwd}/ExportOptions-AppStore.plist"
    ENV['MATCH_TYPE'] = "appstore"
    build_projet
    upload_testflight
  end

  lane :waves_test_adhoc do
      ENV['SCHEME_PROJECT'] ="WavesWallet-iOS-Test"
      ENV['FASTLANE_APP_IDENTIFIER'] = "com.wavesplatform.waveswallet.test"
      ENV['TESTFLIGHT_APP_IDENTITIFER'] = "com.wavesplatform.waveswallet.test"
      ENV['URL_FIREBASE'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Test.plist"
      ENV['URL_APPSFLYER'] = "#{ENV['URL_ROOT_APPSFLYER']}/Appsflyer-Info-Test.plist"
      ENV['EXPORT_OPTIONS'] = "#{Dir.pwd}/ExportOptions-AdHoc.plist"      
      ENV['MATCH_TYPE'] = "adhoc"
      build_projet
      upload_crashlytics
  end

  lane :build_projet do

    setup_circle_ci

    unless Helper.ci?
        sh("echo CI DONT USE")
        ENV['MATCH_KEYCHAIN_NAME']="login.keychain"
    end
    sh("printenv")

    match(app_identifier: ["com.wavesplatform.waveswallet.test", "com.wavesplatform.waveswallet", "com.wavesplatform.waveswallet.dev"],
      git_url: "#{ENV['URL_CERTIFICATES_GIT']}",
      username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
      type: "#{ENV['MATCH_TYPE']}",
      readonly: true,
      keychain_name: "#{ENV['MATCH_KEYCHAIN_NAME']}")

    # match(app_identifier: ["com.wavesplatform.waveswallet.test"],
    #   git_url: "#{ENV['URL_CERTIFICATES_GIT']}",
    #   username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
    #   type: "adhoc",
    #   readonly: true,
    #   keychain_name: "#{ENV['MATCH_KEYCHAIN_NAME']}")

    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Appsflyer-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_APPSFLYER']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Appsflyer-Info.plist")

		cocoapods(
			verbose: true,
			clean: true,
			use_bundle_exec: false
		)

		gym(scheme: "#{ENV['SCHEME_PROJECT']}",
        workspace: "WavesWallet-iOS.xcworkspace",
        include_bitcode: true,
        include_symbols: true,
        export_options: "#{ENV['EXPORT_OPTIONS']}"
    )

  end

  lane :upload_crashlytics do 

    ENV['CRASHLYTICS_API_TOKEN']=sh("/usr/libexec/PlistBuddy -c 'Print :Fabric:APIKey' '#{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist'")
    ENV['CRASHLYTICS_API_TOKEN']="#{ENV['CRASHLYTICS_API_TOKEN']}"
    ENV['CRASHLYTICS_BUILD_SECRET']=sh("/usr/libexec/PlistBuddy -c 'Print :Fabric:BuildSecret' '#{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist'")
    ENV['CRASHLYTICS_BUILD_SECRET']="#{ENV['CRASHLYTICS_BUILD_SECRET']}"
    ROOT=File.expand_path("..", Dir.pwd)
    SUMBIT_PAPTH="#{ROOT}/Pods/Crashlytics/submit"
    IPA_PATH="#{ROOT}/WavesWallet-iOS.ipa"
    # puts APIKey

    # crashlytics()

    sh("#{SUMBIT_PAPTH}", "#{ENV['CRASHLYTICS_API_TOKEN']}" "#{ENV['CRASHLYTICS_BUILD_SECRET']} -ipaPath '#{IPA_PATH}' -notifications YES")

    # crashlytics(api_token: "#{ENV['CRASHLYTICS_API_TOKEN']}",
                # build_secret: "#{ENV['CRASHLYTICS_BUILD_SECRET']}")
    upload_symbols_to_crashlytics(gsp_path: "#{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")

  end

  lane :certificates do

  
    match(app_identifier: ["com.wavesplatform.waveswallet.test", "com.wavesplatform.waveswallet", "com.wavesplatform.waveswallet.dev"],
          git_url: "#{ENV['URL_CERTIFICATES_GIT']}",
          username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
          type: "appstore",
          readonly: true)
  end

  lane :download_environments do
    ENV['URL_FIREBASE'] = "#{ENV['URL_ROOT_FIREBASE']}/GoogleService-Info-Dev.plist"
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FABRIC']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Fabric-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_FIREBASE']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
    sh("rm -rf #{Dir.pwd}/../WavesWallet-iOS/Resources/Appsflyer-Info.plist")
    sh("curl -X GET -H 'Authorization: Basic #{ENV['AUTH_KEY_OPTIONS']}' #{ENV['URL_APPSFLYER']} >> #{Dir.pwd}/../WavesWallet-iOS/Resources/Appsflyer-Info.plist")
  end

  lane :upload_testflight do
    testflight(username: "#{ENV['APPLE_DEV_PORTAL_ID']}",
               itc_provider: "#{ENV['FASTLANE_ITC_TEAM_ID']}",      
               wait_for_uploaded_build: "false")
    upload_symbols_to_crashlytics(gsp_path: "#{Dir.pwd}/../WavesWallet-iOS/Resources/GoogleService-Info.plist")
  end

end
